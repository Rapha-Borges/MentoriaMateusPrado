# Bancos de Dados

(...)
Teoria de Cap: Deve existir um tradeoff: CP / AP (ou a aplicação vai precisar de consistencia e particionamento ou 
disponibilidade e particionamento) -> é isso que diz pra voce a melhor opcao ACID/BASE
>Consistência, Availability e Partition (CAP)

Consistencia fraca: Ganho em disponibilidade, pois para disponibilizar esse dado antes preciso que o dado esteja
disponível, ou seja, replicado em outros pontos. As vezes você vai fazer uma query e vai cair em uma máquina que
não está com o dado atualizado -> Aumentar SLA, disponibilidade.

Niveis de consistencia: Fraca (sem garantia de entrega rápida), Eventual (eventualmente disponível rapidamente),
Forte (garantia de entrega rápida)

ACID: Prevalece Consistência (CP) - consistência forte (objetivo é entregar o dado mais recente)
BASE: Prevalece Availability (AP) - consistência eventual e fraca (objetivo é disponibilidade, não o dado mais
recente)

Atomic and consistent (tudo acontece dentro de uma transação) -> relacionado a consistencia e qualidade do dado
e rollback automático em casos de falhas
Use case: banco de dados para transações bancárias

Isolated -> tudo que é feito dentro de uma transação é feito de forma isolada, ou seja, não afeta outras transações

Durable -> A partir do momento em que comecei uma transação, se houver uma falha de rede no meio do caminho,
faço rollback. Toda manipulação de dados dentro de uma transação, o banco garante não corrompimento de dados.

Em bancos de dados relacionais (SQL), conseguimos entregar ACID.

Basically Available, Soft State (estado maleável controle do dado passa a ser feito do lado da aplicação) 
e Eventual Consistent.

Em bancos relacionais tenho relacionamento entre tabelas, many to many, através de Primary Keys e Foreign keys.

Exemplo:

Tabela cliente      Tabela Orders
ID - PK             ID - FK
NAME                CID - FK

Se eu quiser deletar um cliente, se ele tiver pedidos, não consigo (à prova de idiotas)

Em bancos de dados não relacionais (noSQL), entregamos BASE.
Use case: bancos de dados que precisam de performance e disponibilidade, sem a necessidade de consistência forte.

A engine de um banco noSQL e de um banco SQL é diferente, a forma como eles distribuem dados em clusters é
diferentes.

BA - Disponibilidade

Soft State: Pela falta de consistência imediata (consistência eventual), os valores podem ser alterados de forma
mais flexível, ou seja, se eu quiser deletar um cliente, mesmo que ele tenha pedidos relacionados a ele, consigo.

Não nasceu para ter relacionamento entre tabelas. Alguns bancos noSQL tem alguns mecanismos para trabalhar com 
transações, mas não como o SQL, ou seja, se isso é algo primordial para o negócio, não é uma solução recomendada.

Alguns bancos noSQL, como o Mongo, entregam atomicidade a nível de um único documento.

Use case comum: Redes sociais é um bom exemplo. Consistência eventual é aceitável para o negócio.

Precisamos entender o que a empresa quer fazer, para fazer o banco de dados virar uma solução técnica viável. Todos
os bancos de dados vão funcionar, mas devemos procurar a melhor solução, de acordo com as características do banco.

